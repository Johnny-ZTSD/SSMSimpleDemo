<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID"
         version="3.0">
    <display-name>HiyuSite - SSMDemo</display-name>

    <!-- 统一编码 -->
    <filter>
        <filter-name>charsetEncoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>charsetEncoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 前端控制器/中央控制器 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--指定加载外部的spring-mvc配置文件: 手动指定spring mvc的主配置文件位置和名称
            默认spring mvc会从WEB-INF下去加载[servlet的name]-servlet.xml 这个主配置文件，针对当前的例子
            主配置文件的名称应该是spring-mvc-servlet.xml. 一般我们还是希望把spring mvc的主配置文件放到resources下面，
            所以一般都会手动指定该项
            -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc-servlet.xml</param-value>
            <!--<param-value>classpath:applicationContext.xml,classpath:spring-security.xml</param-value>-->
        </init-param>
        <!-- ↓加载 /WEB-INF/[servlet-name]-servlet.xml -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- 所有匹配'/'的请求都进入SpringMVC -->
    <!-- 如果DispatcherServlet配置"*.do"这样的URL拦截器，就不存在访问不到静态资源的问题。
         如果DispatcherServlet配置"/"拦截了所有的请求，同时对*.js,*.jpg的访问也就被拦截了。-->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!-- '/'会匹配所有url，但不包括 * .jsp，* .html，* .js这类文件 → 即 *.jsp不会进入Spring的DispatcherServlet-->
        <!-- ∴ 需要在springmvc中来加载指定静态资源文件 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!-- 通过html结尾进入SpringMVC -->
    <!-- (伪html，提高SEO) -->
<!--    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>-->
    <!-- 通过/service/* 进入SpringMVC-->
<!--    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/service/*</url-pattern>
    </servlet-mapping>-->

    <!--当 Spring MVC 的拦截路径配置为'/'(拦截所有请求)时，访问静态资源的解决方案:
        ↓方式1: 激活Tomcat的defaultServlet来处理静态文件 -->
    <!--
        Tomcat, Jetty, JBoss, and GlassFish  默认 Servlet的名字 — "default"
        Google App Engine 默认 Servlet的名字 — "_ah_default"
        Resin 默认 Servlet的名字 — "resin-file"
        WebLogic 默认 Servlet的名字  — "FileServlet"
        WebSphere  默认 Servlet的名字 — "SimpleFileServlet" -->
    <!--建议:可写在DispatcherServlet的前面， 让defaultServlet先拦截-->
    <!--<servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>-->

    <!-- 加载Spring相关配置 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
        <!--<param-value>classpath: applicationContext-*.xml</param-value>-->
    </context-param>

    <!--载入 Spring:ApplicationContext  -->
    <!--配置spring的核心监听器
        作用：在tomcat启动的时候，创建spring 的工厂类对象，把工厂类对象绑定到tomcat的上下文中
        以前写java项目第一步都是创建spring的工厂类对象
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        运行web项目还需不需要spring的工厂类对象？需要的。
        什么时候创建比较合适？tommcat启动的时候创建比较合适。
        所以spring就为我们提供了1个监听器来实现这些代码。
        -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

<!--    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>-->

    <!-- 配置SESSION超时，单位: 分钟 -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

    <error-page>
        <error-code>404</error-code>
        <location>/notFound.jsp</location>
    </error-page>
</web-app>